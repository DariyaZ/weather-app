{"version":3,"sources":["Icon/Icon.js","utils.js","Icon/types.js","WeatherCard/WeatherCard.js","App/App.js","index.js"],"names":["Icon","weatherType","this","props","react_default","a","createElement","className","concat","iconSize","small","medium","large","size","React","Component","getDateFromDT","dt","format","moment","WEATHER_ICONS_BY_TYPE","rain","clear","clouds","unknown","getIconByWeatherType","type","WeatherCard","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","weather","fetchWeatherData","bind","assertThisInitialized","fetch","json","data","setState","console","log","list","weatherToday","main","toLowerCase","dayForecast","map","day","href","key","toUpperCase","Icon_Icon","temp","toFixed","Fragment","city","name","App","WeatherCard_WeatherCard","ReactDOM","render","src_App_App","document","getElementById"],"mappings":"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","file":"static/js/main.d709531c.chunk.js","sourcesContent":["import React from 'react';\n\nexport default class Icon extends React.Component {\n    get iconSize() {\n        const { size } = this.props;\n        const sizes = {\n            small: '32',\n            medium: '64',\n            large: '128',\n        };\n\n        return sizes[size || 'small'];\n    }\n\n    render() {\n        const { weatherType } = this.props;\n\n        return (\n            <i className={`wu wu-black wu-${this.iconSize} wu-${weatherType}`} />\n        );\n    }\n}\n","import moment from 'moment';\n\n// export const API_KEY = 'fc17090166f0e269f919f81b1e0ecf05';\nexport const API_KEY = \"47fe20af59af3bbf2a3b306a18fdb1d7\";\n\n\nexport const getDateFromDT = (dt, format) => {\n    return moment(dt * 1000).format(format);\n}","const WEATHER_ICONS_BY_TYPE = {\n    rain: \"rain\",\n    clear: \"clear\",\n    clouds: \"cloudy\",\n    unknown: \"unknown\"\n};\n\nexport const getIconByWeatherType = (type) => {\n    return WEATHER_ICONS_BY_TYPE[type || 'unknown'];\n}","import React from 'react';\nimport Icon from '../Icon/index';\n\nimport { API_KEY, getDateFromDT } from '../utils';\nimport { getIconByWeatherType } from '../Icon/types';\n\nexport default class WeatherCard extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            weather: {}\n        }\n\n        this.fetchWeatherData = this.fetchWeatherData.bind(this);\n    }\n\n    componentDidMount() {\n        this.fetchWeatherData();\n    }\n\n    async fetchWeatherData() {\n        const json = await fetch(`https://api.openweathermap.org/data/2.5/forecast/daily?q=Kyiv&units=metric&cnt=7&appid=${API_KEY}`);\n        const data = await json.json();\n\n        this.setState({\n            weather: data\n        });\n    }\n\n    render() {\n        console.log(this.state.weather);\n        const { weather } = this.state;\n\n        if (!weather.list) {\n            return null;\n        }\n\n        const weatherToday = weather.list[0];\n        const weatherType = weatherToday.weather[0].main.toLowerCase();     \n\n        const days = [1, 2, 3, 4, 5, 6];\n\n        const dayForecast = days.map((day) =>\n            <a href='#' key={day} className='forecast-day'>\n                <span>{getDateFromDT(weather.list[day].dt, 'ddd').toUpperCase()}</span>\n                <span className='weather-icon'>\n                    <Icon size='small' weatherType={getIconByWeatherType(weather.list[day].weather[0].main.toLowerCase())}/>\n                </span>\n                <span>\n                    {weather.list[day].temp.day.toFixed()}°\n                </span>\n            </a>\n        );\n\n        return (\n            <React.Fragment>\n                <div className='content-left'>\n                    <section className='forecast-today'>\n                        <span className='city'>{weather.city.name.toUpperCase()}</span><br></br>\n                        <span className='date-today'>{ getDateFromDT(weatherToday.dt, 'MMMM Do') }</span>\n                        <p className='forecast-info'>\n                            <span className='temperature'>{weatherToday.temp.day.toFixed()}°</span>\n                            <span>\n                                <Icon size='large' weatherType={getIconByWeatherType(weatherType)}/>\n                            </span>\n                        </p>\n                    </section>\n\n                    <section className='forecast-week'>\n                        {dayForecast}\n                    </section>\n                </div>\n\n                <div className={`content-right background-${getIconByWeatherType(weatherType)}`}></div>\n            </React.Fragment>\n        );\n    }\n}\n\n","import React from 'react';\nimport './App.css';\n\nimport WeatherCard from '../WeatherCard/index'\n\nfunction App() {\n    return (\n        <div className=\"base\">\n            <main className=\"content\">\n                <WeatherCard />\n            </main>\n        </div>\n    );\n}\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport './Icon/wu-icons-style.min.css';\nimport App from './App/index';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n"],"sourceRoot":""}